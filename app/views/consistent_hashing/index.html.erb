<div class="mx-auto max-w-4xl text-center bg-white px-6 py-24 sm:py-32 lg:px-8">
  <p class="text-base font-semibold leading-7 text-gray-600">System Design</p>
  <h1 class="mt-2 text-4xl font-bold tracking-tight text-black sm:text-6xl">Consistent Hashing</h1>
  <p class="mt-6 text-lg leading-8 text-gray-600">
    A distributed hashing scheme that operates independently of the number of servers, allowing for minimal remapping of keys when servers are added or removed.
  </p>
  
  <div class="mt-10 flex items-center justify-center gap-x-6">
    <%= link_to "← Back to System Designs", root_path, class: "rounded-md bg-black px-3.5 py-2.5 text-sm font-semibold text-white shadow-sm hover:bg-gray-800 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-black" %>
  </div>
</div>

<div class="bg-white px-6 py-8 sm:py-12 lg:px-8">
  <div class="mx-auto max-w-4xl text-base leading-7 text-gray-700">
    <div class="mt-10 max-w-3xl">
      <h2 class="mt-8 text-2xl font-bold tracking-tight text-black">The Problem with Traditional Hashing</h2>
      <p class="mt-4">
        In distributed systems, we often need to determine which server should store or process a particular piece of data.
        The traditional approach uses a simple modulo operation:
      </p>

      <div class="mt-4 bg-gray-100 p-4 rounded-md border border-gray-200">
        <pre class="text-sm overflow-x-auto"><code>server_index = hash(key) % number_of_servers</code></pre>
      </div>
      
      <p class="mt-4">
        However, this approach has a major drawback: when the number of servers changes (a server is added or removed),
        almost all keys get reassigned to different servers. This causes massive data migration and can lead to performance issues.
      </p>
      
      <div class="mt-10 bg-gray-50 p-6 rounded-lg border border-gray-200" data-controller="consistent-hashing" data-consistent-hashing-demo-type-value="traditional">
        <h3 class="text-lg font-bold tracking-tight text-black">Traditional Hashing Demo</h3>
        <p class="mt-2">
          See how keys get redistributed when servers are added or removed using traditional hashing.
        </p>
        
        <div class="mt-4" id="traditional_hashing_demo">
          <!-- Traditional hashing visualization will be inserted here by JavaScript -->
          <div class="h-[320px] bg-gray-100 rounded-md flex items-center justify-center p-4 mb-6" data-consistent-hashing-target="vizContainer">
            <p class="text-gray-500">Traditional hashing visualization loading...</p>
          </div>
          
          <p class="text-xs text-gray-500 text-center mb-4 italic">
            <span class="inline-flex items-center"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4 mr-1"><path stroke-linecap="round" stroke-linejoin="round" d="M7.5 3.75H6A2.25 2.25 0 0 0 3.75 6v1.5M16.5 3.75H18A2.25 2.25 0 0 1 20.25 6v1.5m0 9V18A2.25 2.25 0 0 1 18 20.25h-1.5m-9 0H6A2.25 2.25 0 0 1 3.75 18v-1.5M15 12a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z" /></svg>
              Drag keys to rearrange the visualization</span>
          </p>
          
          <div class="mt-8 flex flex-wrap justify-center gap-4">
            <button type="button"
                class="rounded-md bg-black px-4 py-2 text-sm font-semibold text-white shadow-sm hover:bg-gray-800 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-black"
                data-action="consistent-hashing#addTraditionalServer">
              Add Server
            </button>
            
            <button type="button"
                class="rounded-md bg-black px-4 py-2 text-sm font-semibold text-white shadow-sm hover:bg-gray-800 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-black"
                data-action="consistent-hashing#addTraditionalKey">
              Add Key
            </button>
            
            <button type="button"
                class="rounded-md bg-white px-4 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50"
                data-action="consistent-hashing#removeTraditionalServer">
              Remove Server
            </button>
            
            <button type="button"
                class="rounded-md bg-gray-100 px-3 py-1.5 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-black"
                data-action="consistent-hashing#resetTraditional">
              Reset
            </button>
          </div>
          
          <!-- Hash Table Display -->
          <div class="mt-6 overflow-x-auto" data-consistent-hashing-target="hashTable">
            <!-- Hash assignment table will be inserted here by JavaScript -->
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<div class="bg-gray-50 px-6 py-8 sm:py-12 lg:px-8">
  <div class="mx-auto max-w-4xl text-base leading-7 text-gray-700">
    <div class="mt-10 max-w-3xl">
      <h2 class="mt-8 text-2xl font-bold tracking-tight text-black">Consistent Hashing Algorithm</h2>
      <p class="mt-4">
        Consistent hashing solves this redistribution problem by arranging both servers and keys on a hash ring (or circle).
        Each key is assigned to the nearest server going clockwise around the ring.
      </p>
      
      <p class="mt-4">
        With this approach, when a server is added or removed, only the keys that were assigned to that server and some keys from the next server need to be redistributed.
        This significantly reduces the amount of data that needs to be moved.
      </p>
      
      <p class="mt-4">
        To improve distribution, each physical server is represented by multiple points on the ring, called virtual nodes. 
        This ensures a more even distribution of keys among servers.
      </p>
      
      <div class="mt-10 bg-white p-6 rounded-lg shadow-sm" data-controller="consistent-hashing-ring">
        <h3 class="text-lg font-bold tracking-tight text-black">Consistent Hashing Demo</h3>
        <p class="mt-2 text-sm text-gray-500">
          Explore how consistent hashing works by adding/removing servers and keys. Toggle virtual nodes to see their effect on distribution.
        </p>
        
        <div class="mt-6" id="consistent_hashing_demo">
          <!-- Consistent hashing visualization will be inserted here by JavaScript -->
          <div class="h-80 bg-gray-50 rounded-md flex flex-col items-center justify-center" data-consistent-hashing-ring-target="vizContainer">
            <p class="text-gray-500">Consistent hashing visualization loading...</p>
          </div>
          
          <p class="text-xs text-gray-500 text-center my-4 italic">
            <span class="inline-flex items-center"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4 mr-1"><path stroke-linecap="round" stroke-linejoin="round" d="M7.5 3.75H6A2.25 2.25 0 0 0 3.75 6v1.5M16.5 3.75H18A2.25 2.25 0 0 1 20.25 6v1.5m0 9V18A2.25 2.25 0 0 1 18 20.25h-1.5m-9 0H6A2.25 2.25 0 0 1 3.75 18v-1.5M15 12a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z" /></svg>
              Drag keys to rearrange the visualization</span>
          </p>

          <div class="mt-4 grid grid-cols-1 sm:grid-cols-2 md:flex md:flex-wrap justify-center gap-2">
            <!-- Server Controls -->
            <div class="flex flex-wrap items-center justify-center gap-2">
              <button type="button"
                  class="rounded-md bg-black px-3 py-1.5 text-xs font-medium text-white shadow-sm hover:bg-gray-800 sm:px-4 sm:py-2 sm:text-sm"
                  data-action="consistent-hashing-ring#addConsistentServer"
                  data-consistent-hashing-ring-target="addServerBtn">
                Add Server
              </button>
              
              <button type="button"
                  class="rounded-md bg-white px-3 py-1.5 text-xs font-medium text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50 sm:px-4 sm:py-2 sm:text-sm"
                  data-action="consistent-hashing-ring#removeConsistentServer"
                  data-consistent-hashing-ring-target="removeServerBtn">
                Remove Server
              </button>
            </div>
            
            <!-- Key Controls -->
            <div class="flex flex-wrap items-center justify-center gap-2 mt-2 sm:mt-0">
              <input type="text" 
                    class="rounded-md border-0 py-1.5 px-2 text-sm text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-black w-32 sm:w-36" 
                    placeholder="Hash (0-999)" 
                    data-consistent-hashing-ring-target="consistentKeyInput">
              
              <button type="button"
                  class="rounded-md bg-black px-3 py-1.5 text-xs font-medium text-white shadow-sm hover:bg-gray-800 sm:px-4 sm:py-2 sm:text-sm"
                  data-action="consistent-hashing-ring#addKeyConsistent"
                  data-consistent-hashing-ring-target="addKeyBtn">
                Add Key
              </button>
              
              <button type="button"
                  class="rounded-md bg-white px-3 py-1.5 text-xs font-medium text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50 sm:px-4 sm:py-2 sm:text-sm"
                  data-action="consistent-hashing-ring#removeConsistentKey"
                  data-consistent-hashing-ring-target="removeKeyBtn">
                Remove Key
              </button>
            </div>
            
            <!-- Additional Controls -->
            <div class="flex flex-wrap items-center justify-center gap-2 mt-2 md:mt-0">
              <button type="button"
                  class="rounded-md bg-gray-100 px-3 py-1.5 text-xs font-medium text-gray-700 hover:bg-gray-200 sm:px-4 sm:py-2 sm:text-sm"
                  data-action="consistent-hashing-ring#toggleVirtualNodes"
                  data-consistent-hashing-ring-target="toggleVirtualNodesBtn">
                Toggle Virtual Nodes
              </button>
              
              <button type="button"
                  class="rounded-md bg-gray-100 px-3 py-1.5 text-xs font-medium text-gray-700 hover:bg-gray-200 sm:px-4 sm:py-2 sm:text-sm"
                  data-action="consistent-hashing-ring#resetConsistent"
                  data-consistent-hashing-ring-target="resetBtn">
                Reset
              </button>
            </div>
          </div>
          
          <!-- Hash Calculation Explanation -->
          <div data-consistent-hashing-ring-target="hashExplanation" class="mt-6">
            <!-- Hash explanation will be inserted here by JavaScript -->
          </div>
          
          <!-- Hash Table Display -->
          <div class="mt-6 overflow-x-auto" data-consistent-hashing-ring-target="hashTable">
            <!-- Hash assignment table will be inserted here by JavaScript -->
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<div class="bg-white px-6 py-8 sm:py-12 lg:px-8">
  <div class="mx-auto max-w-4xl text-base leading-7 text-gray-700">
    <div class="mt-10 max-w-3xl">
      <h2 class="mt-8 text-2xl font-bold tracking-tight text-black">Real-world Applications</h2>
      <p class="mt-4">
        Consistent hashing is used in many distributed systems where data needs to be efficiently partitioned across multiple servers:
      </p>
      
      <ul class="mt-4 list-disc pl-5 space-y-2">
        <li>
          <strong>Distributed Caches</strong> - Memcached and Redis Cluster use consistent hashing to distribute cached data across multiple nodes.
        </li>
        <li>
          <strong>Distributed Databases</strong> - Systems like Apache Cassandra and Amazon DynamoDB use consistent hashing for data partitioning.
        </li>
        <li>
          <strong>Content Delivery Networks (CDNs)</strong> - Akamai and Cloudflare use consistent hashing to determine which edge server should handle a request.
        </li>
        <li>
          <strong>Load Balancers</strong> - HAProxy and other load balancers can use consistent hashing to maintain user session affinity.
        </li>
      </ul>
      
      <p class="mt-6">
        The key advantage in all these systems is minimizing data movement when the system topology changes,
        allowing for seamless scaling and high availability even during server additions or failures.
      </p>
    </div>
  </div>
</div> 